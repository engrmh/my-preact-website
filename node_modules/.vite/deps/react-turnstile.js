import {
  compat_module_exports,
  init_compat_module
} from "./chunk-WQ4WOJ3H.js";
import "./chunk-4GUH3IH3.js";
import "./chunk-UK3S2A2P.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/react-turnstile/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-turnstile/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTurnstile = void 0;
    var react_1 = __importStar((init_compat_module(), __toCommonJS(compat_module_exports)));
    var globalNamespace = typeof globalThis !== "undefined" ? globalThis : window;
    var turnstileState = typeof globalNamespace.turnstile !== "undefined" ? "ready" : "unloaded";
    var ensureTurnstile;
    var turnstileLoad;
    var turnstileLoadPromise = new Promise((resolve, reject) => {
      turnstileLoad = { resolve, reject };
      if (turnstileState === "ready")
        resolve(void 0);
    });
    {
      const TURNSTILE_LOAD_FUNCTION = "cf__reactTurnstileOnLoad";
      const TURNSTILE_SRC = "https://challenges.cloudflare.com/turnstile/v0/api.js";
      ensureTurnstile = () => {
        if (turnstileState === "unloaded") {
          turnstileState = "loading";
          globalNamespace[TURNSTILE_LOAD_FUNCTION] = () => {
            turnstileLoad.resolve();
            turnstileState = "ready";
            delete globalNamespace[TURNSTILE_LOAD_FUNCTION];
          };
          const url = `${TURNSTILE_SRC}?onload=${TURNSTILE_LOAD_FUNCTION}&render=explicit`;
          const script = document.createElement("script");
          script.src = url;
          script.async = true;
          script.addEventListener("error", () => {
            turnstileLoad.reject("Failed to load Turnstile.");
            delete globalNamespace[TURNSTILE_LOAD_FUNCTION];
          });
          document.head.appendChild(script);
        }
        return turnstileLoadPromise;
      };
    }
    function Turnstile({ id, className, style, sitekey, action, cData, theme, language, tabIndex, responseField, responseFieldName, size, fixedSize, retry, retryInterval, refreshExpired, appearance, execution, userRef, onVerify, onLoad, onError, onExpire, onTimeout }) {
      const ownRef = (0, react_1.useRef)(null);
      const inplaceState = (0, react_1.useState)({ onVerify })[0];
      const ref = userRef !== null && userRef !== void 0 ? userRef : ownRef;
      (0, react_1.useEffect)(() => {
        if (!ref.current)
          return;
        let cancelled = false;
        let widgetId = "", timeoutId = 0;
        (async () => {
          var _a, _b;
          if (turnstileState !== "ready") {
            try {
              await ensureTurnstile();
            } catch (e) {
              (_a = inplaceState.onError) === null || _a === void 0 ? void 0 : _a.call(inplaceState, e);
              return;
            }
          }
          if (cancelled || !ref.current)
            return;
          let boundTurnstileObject;
          const turnstileOptions = {
            sitekey,
            action,
            cData,
            theme,
            language,
            tabindex: tabIndex,
            "response-field": responseField,
            "response-field-name": responseFieldName,
            size,
            retry: "never",
            "retry-interval": retryInterval,
            "refresh-expired": refreshExpired,
            appearance,
            execution,
            callback: (token) => inplaceState.onVerify(token, boundTurnstileObject),
            "error-callback": (error) => {
              var _a2;
              if (!retry || retry === "auto") {
                timeoutId = setTimeout(() => {
                  boundTurnstileObject.reset();
                  timeoutId = 0;
                }, 2e3 + (retryInterval !== null && retryInterval !== void 0 ? retryInterval : 8e3));
              }
              (_a2 = inplaceState.onError) === null || _a2 === void 0 ? void 0 : _a2.call(inplaceState, error, boundTurnstileObject);
            },
            "expired-callback": (token) => {
              var _a2;
              return (_a2 = inplaceState.onExpire) === null || _a2 === void 0 ? void 0 : _a2.call(inplaceState, token, boundTurnstileObject);
            },
            "timeout-callback": () => {
              var _a2;
              return (_a2 = inplaceState.onTimeout) === null || _a2 === void 0 ? void 0 : _a2.call(inplaceState, boundTurnstileObject);
            }
          };
          widgetId = window.turnstile.render(ref.current, turnstileOptions);
          boundTurnstileObject = createBoundTurnstileObject(widgetId);
          (_b = inplaceState.onLoad) === null || _b === void 0 ? void 0 : _b.call(inplaceState, widgetId, boundTurnstileObject);
        })();
        return () => {
          cancelled = true;
          if (widgetId)
            window.turnstile.remove(widgetId);
          if (timeoutId)
            clearTimeout(timeoutId);
        };
      }, [
        sitekey,
        action,
        cData,
        theme,
        language,
        tabIndex,
        responseField,
        responseFieldName,
        size,
        retry,
        retryInterval,
        refreshExpired,
        appearance,
        execution
      ]);
      (0, react_1.useEffect)(() => {
        inplaceState.onVerify = onVerify;
        inplaceState.onLoad = onLoad;
        inplaceState.onError = onError;
        inplaceState.onExpire = onExpire;
        inplaceState.onTimeout = onTimeout;
      }, [onVerify, onLoad, onError, onExpire, onTimeout]);
      return react_1.default.createElement("div", { ref, id, className, style: fixedSize ? {
        ...style !== null && style !== void 0 ? style : {},
        width: size === "compact" ? "130px" : "300px",
        height: size === "compact" ? "120px" : "65px"
      } : style });
    }
    exports.default = Turnstile;
    function createBoundTurnstileObject(widgetId) {
      return {
        execute: (options) => window.turnstile.execute(widgetId, options),
        reset: () => window.turnstile.reset(widgetId),
        getResponse: () => window.turnstile.getResponse(widgetId)
      };
    }
    function useTurnstile() {
      const [_, setState] = (0, react_1.useState)(turnstileState);
      (0, react_1.useEffect)(() => {
        if (turnstileState === "ready")
          return;
        turnstileLoadPromise.then(() => setState(turnstileState));
      }, []);
      return globalNamespace.turnstile;
    }
    exports.useTurnstile = useTurnstile;
  }
});
export default require_dist();
//# sourceMappingURL=react-turnstile.js.map
